;;; nibelung-theme-base.el --- Base theme generator -*- lexical-binding: t; -*-

(defun nibelung-theme-create (theme-name palette)
  "Create a theme with THEME-NAME using colors from PALETTE."
  (let* ((bg                  (plist-get palette :bg))
         (fg                  (plist-get palette :fg))
         (level0              (plist-get palette :level0))
         (level1              (plist-get palette :level1))
         (level2              (plist-get palette :level2))
         (level3              (plist-get palette :level3))
         (level4              (plist-get palette :level4))
         (level5              (plist-get palette :level5))
         (level6              (plist-get palette :level6))
         (accent-subtle       (plist-get palette :accent-subtle))
         (accent-light        (plist-get palette :accent-light))
         (accent-bright       (plist-get palette :accent-bright))
         (accent-match        (plist-get palette :accent-match))
         (emphasis            (plist-get palette :emphasis))
         (link-color          (plist-get palette :link))
         (comment-bg          (plist-get palette :comment-bg))
         (rainbow-blue        (plist-get palette :rainbow-blue))
         (rainbow-red         (plist-get palette :rainbow-red))
         (rainbow-orange      (plist-get palette :rainbow-orange))
         (rainbow-yellow      (plist-get palette :rainbow-yellow))
         (rainbow-green       (plist-get palette :rainbow-green))
         (rainbow-cyan        (plist-get palette :rainbow-cyan))
         (rainbow-bluelight   (plist-get palette :rainbow-bluelight))
         (rainbow-magenta     (plist-get palette :rainbow-magenta))

         ;; FACES definitions
         (bold `((t (:foreground ,emphasis :weight normal))))
         (builtin `((t (:foreground ,level3 :weight normal))))
         (code-block `((t (:extend t :background ,level0 :weight normal))))
         (code-block-header `((t (:extend t :background ,level1 :foreground ,fg :weight normal))))
         (comment `((t (:extend t :background ,comment-bg :foreground ,level3 :weight normal))))
         (constant `((t (:foreground ,level4 :weight normal))))
         (cursor `((t (:foreground ,bg))))
         (default `((t (:foreground ,fg :background ,bg :weight normal))))
         (function `((t (:foreground ,level5 :weight normal))))
         (header `((t (:background ,level4 :foreground ,level0 :weight normal))))
         (header-not-extended `((t (:extend nil :background ,level4 :foreground ,level0 :weight normal))))
         (highlight `((t (:override t :background ,level4 :foreground ,level0 :distant-foreground ,level0 :weight normal))))
         (link `((t (:foreground ,link-color :underline t :weight normal))))
         (lpadding '(:box (:line-width (10 . 1) :style flat-button)))
         (match `((t (:background ,emphasis :foreground ,level1 :weight normal))))
         (modeline `((t (:background ,fg :foreground ,level0 :weight normal))))
         (modeline-indicator header)
         (modeline-white `((t (:foreground ,level5 :background ,level0 :weight normal))))
         (optional `((t (:foreground ,level2 :weight normal))))
         (org-done `((t (:background ,bg :foreground ,fg :height 0.95 :weight normal ,@lpadding))))
         (org-todo* `((t (:background ,fg :foreground ,bg :height 0.95 :weight normal ,@lpadding))))
         (replace-confirm `((t (:background ,level4 :foreground ,level0 :weight normal))))
         (replace-match* `((t (:background ,level5 :foreground ,level0 :weight normal))))
         (string* `((t (:background ,level4 :foreground ,bg :weight normal))))
         (symbol `((t (:foreground ,level5 :weight normal))))
         (text `((t (:foreground ,fg :weight normal))))
         (type builtin)
         (variable constant))

    (custom-theme-set-faces
     theme-name
     `(default ,default)
     `(cursor ,cursor)
     `(highlight ,highlight)
     `(hl-line ((t (:background ,level0 :weight normal))))
     `(bold ((t (:foreground ,emphasis :weight normal))))
     ;; Constant
     `(font-lock-builtin-face ,builtin)
     `(font-lock-preprocessor-face ,type)
     `(font-lock-constant-face ,constant)
     `(font-lock-function-call-face ,link)
     `(highlight-quoted-symbol ,symbol)
     `(font-lock-keyword-face ,constant)
     `(clojure-keyword-face ,builtin)
     `(font-lock-string-face ,string*)
     `(font-lock-delimiter-face ((t (:foreground ,emphasis :weight normal))))
     `(font-lock-type-face ,type)
     `(font-lock-function-name-face ,optional)
     `(font-lock-variable-name-face ,builtin)
     `(font-lock-bracket-face ,optional)
     `(tree-sitter-hl-face:string ,constant)
     `(tree-sitter-hl-face:string.delimiter ,constant)
     `(tree-sitter-hl-face:property ,optional)
     `(tree-sitter-hl-face:keyword ,optional)
     `(tree-sitter-hl-face:punctuation ,optional)
     `(tree-sitter-hl-face:punctuation.delimiter ,optional)
     `(font-lock-escape-face ,optional)
     `(font-lock-operator-face ,optional)
     ;; Comment
     `(font-lock-comment-delimiter-face ,comment)
     `(font-lock-comment-face ,comment)
     `(font-lock-doc-face ,optional)
     `(font-lock-warning-face ((t (:foreground ,fg))))
     ;; Misc
     `(shadow ,optional)
     `(whitespace-tab ,optional)
     `(sh-quoted-exec ,optional)
     `(line-number ((t (:background ,bg :foreground ,fg))))
     `(message-header-newsgroups ,text)
     `(message-header-xheader ,text)
     `(message-header-cc ,text)
     `(message-header-to ,text)
     `(minibuffer-prompt ,code-block-header)
     `(marginalia-documentation ,optional)
     `(custom-set ,text)
     `(icon ,optional)
     `(+fold-hideshow-folded-face ,optional)
     `(read-multiple-choice-face ,text)
     `(helpful-heading ,comment)
     ;; Custom Menu
     `(custom-variable-tag ,variable)
     `(custom-variable-documentation ,optional)
     `(custom-documentation ,optional)
     `(custom-state ,bold)
     `(custom-visibility ,bold)
     `(custom-group-tag ,header)
     `(custom-button-unraised ,constant)
     `(custom-button ,function)
     `(custom-button-mouse ,header)
     `(widget-field ,symbol)
     `(widget-unselected ,optional)
     ;; Company
     (setq company-format-margin-function nil)
     `(company-tooltip ,function)
     `(company-tooltip-common ,match)
     `(company-tooltip-selection ,header)
     `(company-tooltip-scrollbar-thumb ,header)
     `(company-tooltip-scrollbar-track ,variable)
     `(company-echo-common ,variable)
     `(company-tooltip-annotation ,variable)
     ;; Match
     `(evil-ex-lazy-highlight ,match)
     `(match ,match)
     `(region ,match)
     `(bold ,bold)
     `(orderless-match-face-0 ,match)
     `(orderless-match-face-1 ,match)
     `(show-paren-match ,match)
     `(isearch ,replace-match*)
     `(lazy-highlight ,replace-match*)
     `(evil-ex-substitute-replacement ,replace-confirm)
     `(orderless-match-face-2 ,bold)
     `(orderless-match-face-3 ,bold)
     ;; Warnings
     `(success ,optional)
     `(warning ,header)
     `(error ,header)
     `(flymake-error ((t (:extend t :background ,emphasis :foreground ,fg))))
     `(flymake-warning ((t (:underline (:color ,emphasis :style line :position t)))))
     ;; Modeline
     `(doom-nano-modeline-evil-insert-state-face ,modeline-indicator)
     `(doom-nano-modeline-evil-motion-state-face ,modeline-indicator)
     `(doom-nano-modeline-evil-visual-state-face ,modeline-indicator)
     `(doom-nano-modeline-evil-emacs-state-face ,modeline-indicator)
     `(doom-nano-modeline-evil-operator-state-face ,modeline-indicator)
     `(doom-nano-modeline-evil-normal-state-face ,modeline-indicator)
     `(doom-nano-modeline-inactive ,modeline-white)
     `(doom-nano-modeline-cursor-position-face ,modeline)
     `(doom-nano-modeline-vc-branch-name-face ,modeline-indicator)
     `(mode-line ,modeline)
     `(mode-line-buffer-id ,modeline)
     `(mode-line-emphasis ,modeline)
     `(mode-line-highlight ,modeline)
     `(mode-line-faces ,modeline)
     `(mode-line-inactive ,modeline-white)
     `(doom-dashboard-loaded ,builtin)
     ;; Links
     `(diary ,link)
     `(link ,link)
     ;; Org Mode
     `(+org-todo-cancel ,code-block-header)
     `(org-hide ((t (:foreground ,bg))))
     `(org-agenda-date ,text)
     `(org-agenda-date-today ,code-block-header)
     `(org-agenda-date-weekend ,text)
     `(org-agenda-done ,optional)
     `(org-agenda-structure ,text)
     `(org-block ,code-block)
     `(org-quote ,code-block)
     `(org-block-begin-line ,code-block-header)
     `(org-block-end-line ,code-block-header)
     `(org-done ,optional)
     `(org-document-title ,constant)
     `(org-ellipsis ,optional)
     `(org-headline-done ,optional)
     `(org-list-dt ,constant)
     `(org-meta-line ,constant)
     `(org-modern-done ,org-done)
     `(org-modern-block-name ,constant)
     `(org-modern-label ,org-todo*)
     `(org-modern-todo ,org-todo*)
     `(org-modern-tag ,org-done)
     `(org-modern-date-active ,org-todo*)
     `(org-modern-date-inactive ,org-done)
     `(org-modern-time-active ,org-todo*)
     `(org-modern-time-inactive ,org-done)
     `(org-modern-progress-complete ,org-done)
     `(org-modern-progress-incomplete ,org-todo*)
     `(org-modern-priority ((t (:background ,level3
                                :foreground ,fg
                                :box (:line-width (2 . 1)
                                      :color ,bg
                                      :style flat-button)))))
     `(org-formula ,match)
     `(org-document-info ,symbol)
     `(org-todo ,org-todo*)
     `(org-tag ,function)
     `(org-date ,link)
     `(org-drawer ,optional)
     `(org-checkbox ,optional)
     `(org-list-dt ,optional)
     `(outline-3 ,constant)
     `(outline-2 ,symbol)
     `(outline-1 ,function)
     `(outline-4 ,bold)
     `(markdown-header-face-3 ((t (:foreground ,level4))))
     `(markdown-header-face-2 ((t (:foreground ,level5))))
     `(markdown-header-face-1 ((t (:foreground ,level6))))
     `(markdown-header-face-4 ((t (:foreground ,rainbow-blue))))
     `(org-table ,constant)
     ;; Dired
     `(dired-directory ,constant)
     `(diredfl-file-suffix ,constant)
     `(diredfl-compressed-file-suffix ,constant)
     `(diredfl-file-name ,text)
     `(diredfl-dir-name ,code-block-header)
     `(diredfl-dir-heading ,code-block-header)
     `(diredfl-ignored-file-name ,optional)
     `(diredfl-ignored ,optional)
     `(diredfl-symlink ,link)
     `(dgi-commit-message-face ,optional)
     `(diredfl-dir-priv ,builtin)
     `(diredfl-exec-priv ,constant)
     `(diredfl-no-priv ,optional)
     `(diredfl-link-priv ,constant)
     `(diredfl-read-priv ,optional)
     `(diredfl-write-priv ,optional)
     `(diredfl-rare-priv ,constant)
     `(diredfl-date-time ,optional)
     `(diredfl-number ,constant)
     `(diredfl-deletion ,replace-confirm)
     `(diredfl-deletion-file-name ,replace-confirm)
     `(help-key-binding ,text)
     ;; Rainbow delimiters
     `(rainbow-delimiters-depth-4-face ((t (:foreground ,level4))))
     `(rainbow-delimiters-depth-3-face ((t (:foreground ,rainbow-blue))))
     `(rainbow-delimiters-depth-2-face ((t (:foreground ,level3))))
     `(rainbow-delimiters-depth-1-face ((t (:foreground ,accent-light))))
     `(rainbow-delimiters-unmatched-face ,header)
     `(rainbow-delimiters-base-error-face ,header)
     `(rainbow-delimiters-mismatched-face ,header)
     ;; Magit
     `(magit-tag ,header)
     `(magit-section-highlight ((t (:background ,bg :foreground ,fg))))
     `(magit-diff-context-highlight ((t (:foreground ,fg))))
     `(magit-branch-local ,match)
     `(magit-branch-remote ,header)
     `(magit-section-heading ,code-block-header)
     `(magit-branch-current ,match)
     `(magit-hash ,optional)
     `(magit-reflog-commit ,comment)
     `(magit-diff-added ((t (:foreground ,rainbow-green))))
     `(magit-diff-added-highlight ((t (:foreground ,rainbow-green))))
     `(magit-diff-removed ((t (:foreground ,rainbow-red))))
     `(magit-diff-removed-highlight ((t (:foreground ,rainbow-red))))
     `(diff-refine-added ((t (:background ,level1 :foreground ,rainbow-green ))))
     `(diff-refine-removed ((t (:background ,level1 :foreground ,rainbow-red ))))
     `(magit-diff-lines-heading ,match)
     `(magit-section-heading ,variable)
     `(magit-diff-hunk-heading ((t (:background ,level1 :foreground ,fg))))
     `(magit-diff-hunk-heading-highlight ((t (:background ,level1 :foreground ,fg))))
     `(magit-diff-file-heading ,symbol)
     `(magit-diffstat-added ((t (:foreground ,rainbow-green))))
     `(magit-diffstat-removed ((t (:foreground ,rainbow-red))))
     `(magit-log-author ,optional)
     ;; Transient
     `(transient-key-stay ,text)
     `(transient-key-exit ,constant)
     `(transient-heading ,code-block-header)
     `(transient-value ,match)
     `(transient-argument ,match)
     ;; Treesitter
     `(ts-fold-replacement-face ,optional)
     ;; Cider
     `(cider-result-overlay-face ,modeline-indicator)
     `(cider-test-success-face ,match)
     `(cider-error-overlay-face ,replace-confirm)
     `(cider-test-failure-face ,replace-confirm)
     `(cider-instrumented-face ,link)
     ;; Eshell
     `(eshell-syntax-highlighting-shell-command-face ,bold)
     `(eshell-prompt ,optional)
     `(eshell-syntax-highlighting-invalid-face ,match)
     ;; Colors
     `(ansi-color-black          ((t (:foreground ,level6))))
     `(ansi-color-blue           ((t (:foreground ,rainbow-blue))))
     `(ansi-color-bright-black   ((t (:foreground ,level5))))
     `(ansi-color-bright-blue    ((t (:foreground ,rainbow-cyan))))
     `(ansi-color-bright-cyan    ((t (:foreground ,rainbow-green))))
     `(ansi-color-bright-green   ((t (:foreground ,rainbow-green))))
     `(ansi-color-bright-magenta ((t (:foreground ,rainbow-yellow))))
     `(ansi-color-bright-red     ((t (:foreground ,rainbow-red))))
     `(ansi-color-bright-white   ((t (:foreground ,rainbow-bluelight))))
     `(ansi-color-bright-yellow  ((t (:foreground ,rainbow-yellow))))
     `(ansi-color-cyan           ((t (:foreground ,rainbow-cyan))))
     `(ansi-color-faint          ((t (:foreground ,rainbow-orange))))
     `(ansi-color-fast-blink     ((t (:foreground ,rainbow-blue))))
     `(ansi-color-green          ((t (:foreground ,rainbow-green))))
     `(ansi-color-inverse        ((t (:foreground ,rainbow-orange))))
     `(ansi-color-italic         ((t (:foreground ,rainbow-bluelight))))
     `(ansi-color-magenta        ((t (:foreground ,rainbow-magenta))))
     `(ansi-color-red            ((t (:foreground ,rainbow-red))))
     `(ansi-color-slow-blink     ((t (:foreground ,rainbow-magenta))))
     `(ansi-color-underline      ,link)
     `(ansi-color-white          ((t (:foreground ,rainbow-orange))))
     `(ansi-color-yellow         ((t (:foreground ,rainbow-yellow))))
     `(ansi-color-bold ,bold)

     ;; ========================================
     ;; EXPERIMENTAL FACES
     ;; ========================================
     ;; These faces are work in progress and may not be fully tested
     ;; Contributions and feedback welcome

     ;; Doom Modeline
     `(doom-modeline-bar ((t (:background ,emphasis))))
     `(doom-modeline-bar-inactive ((t (:background ,level2))))
     `(doom-modeline-buffer-file ((t (:foreground ,fg ))))
     `(doom-modeline-buffer-path ((t (:foreground ,level4))))
     `(doom-modeline-buffer-modified ((t (:foreground ,emphasis ))))
     `(doom-modeline-buffer-major-mode ((t (:foreground ,level4))))
     `(doom-modeline-project-dir ((t (:foreground ,level4))))
     `(doom-modeline-project-root-dir ((t (:foreground ,fg))))
     `(doom-modeline-info ((t (:foreground ,emphasis))))
     `(doom-modeline-warning ((t (:foreground ,level4 ))))
     `(doom-modeline-urgent ((t (:foreground ,level5 ))))
     `(doom-modeline-debug ((t (:foreground ,level5))))

     ;; LSP
     `(lsp-face-highlight-textual ((t (:background ,level1))))
     `(lsp-face-highlight-read ((t (:background ,level1 :underline t))))
     `(lsp-face-highlight-write ((t (:background ,level1 ))))
     `(lsp-ui-doc-background ((t (:background ,level0))))
     `(lsp-ui-doc-border ((t (:foreground ,level2))))
     `(lsp-ui-doc-header ((t (:background ,level1 :foreground ,fg))))
     `(lsp-ui-sideline-code-action ((t (:foreground ,emphasis))))
     `(lsp-ui-sideline-current-symbol ((t (:foreground ,emphasis ))))
     `(lsp-ui-sideline-symbol ((t (:foreground ,level3))))

     ;; Flycheck
     `(flycheck-error ((t (:underline (:color ,level5 :style wave)))))
     `(flycheck-warning ((t (:underline (:color ,level4 :style wave)))))
     `(flycheck-info ((t (:underline (:color ,emphasis :style wave)))))
     `(flycheck-fringe-error ((t (:foreground ,level5))))
     `(flycheck-fringe-warning ((t (:foreground ,level4))))
     `(flycheck-fringe-info ((t (:foreground ,emphasis))))

     ;; Git Gutter
     `(git-gutter:added ((t (:foreground ,emphasis ))))
     `(git-gutter:deleted ((t (:foreground ,level5 ))))
     `(git-gutter:modified ((t (:foreground ,level4 ))))
     `(git-gutter:unchanged ((t (:foreground ,level2))))
     `(git-gutter-fr:added ((t (:foreground ,emphasis ))))
     `(git-gutter-fr:deleted ((t (:foreground ,level5 ))))
     `(git-gutter-fr:modified ((t (:foreground ,level4 ))))

     ;; Diff-HL
     `(diff-hl-change ((t (:foreground ,level4 :background ,level1))))
     `(diff-hl-delete ((t (:foreground ,level5 :background ,level1))))
     `(diff-hl-insert ((t (:foreground ,emphasis :background ,level1))))

     ;; Vertico
     `(vertico-current ((t (:background ,level1 :foreground ,fg))))
     `(vertico-group-title ((t (:foreground ,level4 ))))
     `(vertico-group-separator ((t (:foreground ,level2))))

     ;; Consult
     `(consult-file ((t (:foreground ,fg))))
     `(consult-bookmark ((t (:foreground ,emphasis))))
     `(consult-buffer ((t (:foreground ,fg))))
     `(consult-line-number ((t (:foreground ,level3))))
     `(consult-separator ((t (:foreground ,level2))))

     ;; Which-key
     `(which-key-key-face ((t (:foreground ,emphasis))))
     `(which-key-separator-face ((t (:foreground ,level2))))
     `(which-key-command-description-face ((t (:foreground ,fg))))
     `(which-key-group-description-face ((t (:foreground ,level4))))
     `(which-key-special-key-face ((t (:foreground ,level5 ))))
     `(which-key-highlighted-command-face ((t (:foreground ,emphasis ))))

     ;; Treemacs
     `(treemacs-root-face ((t (:foreground ,fg  :height 1.1))))
     `(treemacs-directory-face ((t (:foreground ,fg))))
     `(treemacs-file-face ((t (:foreground ,fg))))
     `(treemacs-git-modified-face ((t (:foreground ,level4))))
     `(treemacs-git-added-face ((t (:foreground ,emphasis))))
     `(treemacs-git-conflict-face ((t (:foreground ,level5))))
     `(treemacs-git-untracked-face ((t (:foreground ,level3))))
     `(treemacs-git-ignored-face ((t (:foreground ,level2))))

     ;; Solaire Mode
     `(solaire-default-face ((t (:background ,level0))))
     `(solaire-hl-line-face ((t (:background ,level1))))
     `(solaire-mode-line-face ((t (:background ,fg :foreground ,level0))))
     `(solaire-mode-line-inactive-face ((t (:background ,level1 :foreground ,level4))))

     ;; Popup
     `(popup-face ((t (:background ,level0 :foreground ,fg))))
     `(popup-menu-selection-face ((t (:background ,level1 :foreground ,fg))))
     `(popup-tip-face ((t (:background ,level1 :foreground ,fg))))

     ;; Indent Guides
     `(highlight-indent-guides-odd-face ((t (:background ,level0))))
     `(highlight-indent-guides-even-face ((t (:background ,bg))))
     `(highlight-indentation-face ((t (:background ,level0))))

     ;; Avy
     `(avy-lead-face ((t (:background ,emphasis :foreground ,level0 ))))
     `(avy-lead-face-0 ((t (:background ,level4 :foreground ,level0 ))))
     `(avy-lead-face-1 ((t (:background ,level3 :foreground ,level0 ))))
     `(avy-lead-face-2 ((t (:background ,level4 :foreground ,level0 ))))
     `(avy-background-face ((t (:foreground ,level2))))

     ;; Ediff
     `(ediff-current-diff-A ((t (:background ,level1 :foreground ,level5))))
     `(ediff-current-diff-B ((t (:background ,level1 :foreground ,emphasis))))
     `(ediff-current-diff-C ((t (:background ,level1 :foreground ,level4))))
     `(ediff-fine-diff-A ((t (:background ,level2 :foreground ,level5 ))))
     `(ediff-fine-diff-B ((t (:background ,level2 :foreground ,emphasis ))))
     `(ediff-fine-diff-C ((t (:background ,level2 :foreground ,level4 ))))
     )))

(provide 'nibelung-theme-base)
;;; nibelung-theme-base.el ends here
